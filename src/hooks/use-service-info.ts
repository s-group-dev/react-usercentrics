import { useContext, useEffect, useState } from 'react'

import { UsercentricsContext } from '../context.js'
import type { ServiceFullInfo, ServiceId, ServiceInfo } from '../types.v2.js'
import { getServicesBaseInfo, getServicesFullInfo } from '../utils.v2.js'
import { useServiceDebug } from './use-service-debug.js'

/**
 * Returns basic info for specific Usercentrics service, or null if not found.
 *
 * The typing is *not complete* and contains only the info used internally:
 *
 * - `id` of the service, autogenerated by Usercentrics
 * - `name` of the service, configured in the admin interface
 * - `consent.status` of the service
 *
 * @see https://docs.usercentrics.com/#/cmp-v2-ui-api?id=getservicesbaseinfo
 */
export const useServiceInfo = (serviceId: ServiceId): ServiceInfo | null => {
    useServiceDebug(serviceId)
    return getServicesBaseInfo().find(({ id }) => serviceId === id) || null
}

/**
 * Returns full info for specific Usercentrics service, or null if not found.
 * This triggers an extra API call and also returns `null` while loading.
 *
 * The typing is *not complete* and contains only the info used internally:
 *
 * - `id` of the service, autogenerated by Usercentrics
 * - `name` of the service, configured in the admin interface
 * - `consent.status` of the service
 * - `description` text of the service
 *
 * @see https://docs.usercentrics.com/#/cmp-v2-ui-api?id=getservicesfullinfo
 */
export const useServiceFullInfo = (serviceId: ServiceId): ServiceFullInfo | null => {
    useServiceDebug(serviceId)

    const { ping } = useContext(UsercentricsContext)
    const [service, setService] = useState<ServiceFullInfo | null>(null)

    useEffect(() => {
        let isMounted = true

        const effect = async () => {
            try {
                const services = await getServicesFullInfo()
                if (isMounted) setService(services.find(({ id }) => serviceId === id) || null)
            } catch {
                if (isMounted) setService(null)
            }
        }

        void effect()

        return () => {
            isMounted = false
        }
    }, [ping, serviceId])

    return service
}
